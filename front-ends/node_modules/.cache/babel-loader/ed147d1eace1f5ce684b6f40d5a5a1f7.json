{"ast":null,"code":"var _jsxFileName = \"/home/spy-maker/Desktop/mportal/front-ends/src/App.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { Form, Icon, Grid, Button } from \"semantic-ui-react\";\nimport TodoItems from './TodoItems/TodoItems';\nimport \"./App.css\";\n\nfunction App() {\n  const [items, setItems] = useState([]);\n  const [val, setVal] = useState('');\n  const [editMode, setEditMode] = useState(false);\n  const [editTaskId, setEditId] = useState('');\n  useEffect(() => {\n    loadTasks();\n  }, [items]);\n\n  const loadTasks = () => {\n    fetch('/tasks/getTasks', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      let newItems = [...items];\n      newItems = resData.tasks.map(t => t);\n      setItems(newItems);\n    });\n  };\n\n  const inputChangeHandler = e => {\n    setVal(e.target.value);\n  };\n\n  const createTask = e => {\n    e.preventDefault();\n\n    if (val !== \"\") {\n      if (editMode == false) {\n        fetch('/tasks/add', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            text: val\n          })\n        }).then(res => {\n          return res.json();\n        }).then(resData => {\n          const newItem = {\n            taskText: resData.task.taskText,\n            key: resData.task._id\n          };\n          let updatedItems = [...items];\n          updatedItems.push(newItem);\n          setItems(updatedItems);\n          setVal(\"\");\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    }\n  };\n\n  const deleteItem = taskindex => {\n    let taskId = items[taskindex]._id;\n    fetch(\"/tasks/delete/\" + taskId, {\n      method: 'DELETE'\n    }).then(res => {\n      return res.json();\n    }).then(result => {\n      const index = items.findIndex(task => task._id === taskId);\n      const newItems = [...items];\n      const updatedItems = newItems.filter(item => item._id !== taskId);\n      setItems(updatedItems);\n    });\n  };\n\n  const editItem = taskindex => {\n    setEditMode(true);\n    let taskId = items[taskindex]._id;\n    setEditId(taskId);\n    let taskText = items[taskindex].taskText;\n    setVal(taskText);\n  };\n\n  const sendEditTask = () => {\n    fetch(\"/tasks/edit/\" + editTaskId, {\n      method: 'PUT',\n      body: JSON.stringify({\n        text: val\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      setEditMode(false);\n      setVal(\"\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"so\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"TodoList \"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    className: \"grid-width\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: createTask,\n    className: \"form\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Input, {\n    name: \"task\",\n    value: val,\n    placeholder: \"Add Task\",\n    onChange: e => inputChangeHandler(e),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"green\",\n    inverted: true,\n    onClick: createTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"checkmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }), \"Add Task\"), editMode ? /*#__PURE__*/React.createElement(Button, {\n    color: \"blue\",\n    inverted: true,\n    onClick: sendEditTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"checkmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 23\n    }\n  }), \"Edit Task\") : null))), /*#__PURE__*/React.createElement(TodoItems, {\n    entries: items,\n    delete: deleteItem,\n    edit: editItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/spy-maker/Desktop/mportal/front-ends/src/App.js"],"names":["React","Fragment","useState","useEffect","Form","Icon","Grid","Button","TodoItems","App","items","setItems","val","setVal","editMode","setEditMode","editTaskId","setEditId","loadTasks","fetch","method","headers","then","res","json","resData","newItems","tasks","map","t","inputChangeHandler","e","target","value","createTask","preventDefault","body","JSON","stringify","text","newItem","taskText","task","key","_id","updatedItems","push","catch","err","console","log","deleteItem","taskindex","taskId","result","index","findIndex","filter","item","editItem","sendEditTask"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,QAAzB,EAAmCC,SAAnC,QAAoD,OAApD;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,MAA3B,QAAyC,mBAAzC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAO,WAAP;;AAGA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,KAAD,EAASC,QAAT,IAAqBT,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACU,GAAD,EAAOC,MAAP,IAAiBX,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA2Bb,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACc,UAAD,EAAaC,SAAb,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZe,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACR,KAAD,CAFM,CAAT;;AAIA,QAAMQ,SAAS,GAAG,MAAM;AACtBC,IAAAA,KAAK,CAAC,iBAAD,EAAoB;AAACC,MAAAA,MAAM,EAAG,KAAV;AAAkBC,MAAAA,OAAO,EAAG;AACnD,wBAAgB;AADmC;AAA5B,KAApB,CAAL,CAEIC,IAFJ,CAESC,GAAG,IAAI;AACd,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAJD,EAIGF,IAJH,CAIQG,OAAO,IAAI;AACjB,UAAIC,QAAQ,GAAG,CAAC,GAAGhB,KAAJ,CAAf;AACAgB,MAAAA,QAAQ,GAAID,OAAO,CAACE,KAAR,CAAcC,GAAd,CAAkBC,CAAC,IAAIA,CAAvB,CAAZ;AACAlB,MAAAA,QAAQ,CAACe,QAAD,CAAR;AACD,KARD;AASD,GAVD;;AAYA,QAAMI,kBAAkB,GAAIC,CAAD,IAAO;AAChClB,IAAAA,MAAM,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAIH,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACI,cAAF;;AACA,QAAGvB,GAAG,KAAK,EAAX,EAAc;AACZ,UAAGE,QAAQ,IAAI,KAAf,EAAqB;AACnBK,QAAAA,KAAK,CAAC,YAAD,EAAiB;AAACC,UAAAA,MAAM,EAAG,MAAV;AAAkBC,UAAAA,OAAO,EAAG;AAChD,4BAAgB;AADgC,WAA5B;AAEnBe,UAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AACvBC,YAAAA,IAAI,EAAG3B;AADgB,WAAf;AAFY,SAAjB,CAAL,CAIKU,IAJL,CAIUC,GAAG,IAAI;AACf,iBAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,SAND,EAMGF,IANH,CAMQG,OAAO,IAAI;AACf,gBAAMe,OAAO,GAAE;AACbC,YAAAA,QAAQ,EAAGhB,OAAO,CAACiB,IAAR,CAAaD,QADX;AAEbE,YAAAA,GAAG,EAAGlB,OAAO,CAACiB,IAAR,CAAaE;AAFN,WAAf;AAIA,cAAIC,YAAY,GAAG,CAAC,GAAGnC,KAAJ,CAAnB;AACAmC,UAAAA,YAAY,CAACC,IAAb,CAAkBN,OAAlB;AACA7B,UAAAA,QAAQ,CAACkC,YAAD,CAAR;AACAhC,UAAAA,MAAM,CAAC,EAAD,CAAN;AACH,SAfD,EAeGkC,KAfH,CAeSC,GAAG,IAAE;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,SAjBD;AAkBD;AAEF;AACF,GAzBD;;AA2BA,QAAMG,UAAU,GAAIC,SAAD,IAAc;AAC/B,QAAIC,MAAM,GAAG3C,KAAK,CAAC0C,SAAD,CAAL,CAAiBR,GAA9B;AACAzB,IAAAA,KAAK,CAAC,mBAAmBkC,MAApB,EACH;AACEjC,MAAAA,MAAM,EAAG;AADX,KADG,CAAL,CAGKE,IAHL,CAGUC,GAAG,IAAI;AAEb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KANH,EAMKF,IANL,CAMUgC,MAAM,IAAI;AAChB,YAAMC,KAAK,GAAG7C,KAAK,CAAC8C,SAAN,CAAgBd,IAAI,IAAIA,IAAI,CAACE,GAAL,KAAaS,MAArC,CAAd;AACA,YAAM3B,QAAQ,GAAG,CAAC,GAAGhB,KAAJ,CAAjB;AACA,YAAMmC,YAAY,GAAGnB,QAAQ,CAAC+B,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACd,GAAL,KAAaS,MAArC,CAArB;AACA1C,MAAAA,QAAQ,CAACkC,YAAD,CAAR;AACD,KAXH;AAYD,GAdD;;AAgBA,QAAMc,QAAQ,GAAIP,SAAD,IAAe;AAC9BrC,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA,QAAIsC,MAAM,GAAG3C,KAAK,CAAC0C,SAAD,CAAL,CAAiBR,GAA9B;AACA3B,IAAAA,SAAS,CAACoC,MAAD,CAAT;AACA,QAAIZ,QAAQ,GAAG/B,KAAK,CAAC0C,SAAD,CAAL,CAAiBX,QAAhC;AACA5B,IAAAA,MAAM,CAAC4B,QAAD,CAAN;AACD,GAND;;AAQA,QAAMmB,YAAY,GAAG,MAAK;AACxBzC,IAAAA,KAAK,CAAC,iBAAiBH,UAAlB,EACH;AACEI,MAAAA,MAAM,EAAG,KADX;AAEEgB,MAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,IAAI,EAAG3B;AAAR,OAAf,CAFT;AAGES,MAAAA,OAAO,EAAG;AAAC,wBAAgB;AAAjB;AAHZ,KADG,CAAL,CAMEC,IANF,CAMOC,GAAG,IAAI;AACZ,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KARD,EAQGF,IARH,CAQQG,OAAO,IAAI;AACjBV,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,MAAAA,MAAM,CAAC,EAAD,CAAN;AACD,KAXD,EAWGkC,KAXH,CAWSC,GAAG,IAAE;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAbD;AAcD,GAfD;;AAkBA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADF,CADF,eAME;AAAK,IAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,SAAS,EAAC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEd,UAAhB;AAA4B,IAAA,SAAS,EAAC,MAAtC;AAA8C,IAAA,IAAI,EAAC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAwB,IAAA,KAAK,EAAEtB,GAA/B;AAAqC,IAAA,WAAW,EAAC,UAAjD;AAA4D,IAAA,QAAQ,EAAGmB,CAAD,IAAKD,kBAAkB,CAACC,CAAD,CAA7F;AAAkG,IAAA,QAAQ,MAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAsB,IAAA,QAAQ,MAA9B;AAA+B,IAAA,OAAO,EAAEG,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,aAFF,EAMMpB,QAAQ,gBACN,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,QAAQ,MAA7B;AAA8B,IAAA,OAAO,EAAE8C,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,cADM,GAGM,IATpB,CADF,CADF,CADF,eAgBE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAElD,KAApB;AAA2B,IAAA,MAAM,EAAEyC,UAAnC;AAA+C,IAAA,IAAI,EAAEQ,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CANF,CADF;AA2BD;;AAED,eAAelD,GAAf","sourcesContent":["import React, { Fragment,useState ,useEffect } from \"react\";\nimport { Form, Icon, Grid ,Button } from \"semantic-ui-react\";\nimport TodoItems from './TodoItems/TodoItems';\nimport \"./App.css\";\n\n\nfunction App() {\n  const [items , setItems] = useState([]);\n  const [val , setVal] = useState('');\n  const [editMode ,setEditMode ] = useState(false);\n  const [editTaskId ,setEditId] = useState('');\n  useEffect(()=>{\n    loadTasks();\n  } ,[items])\n\n  const loadTasks = () => {\n    fetch('/tasks/getTasks' ,{method : 'GET' , headers : {\n      'Content-Type': 'application/json'\n    }}).then(res => {\n      return res.json()\n    }).then(resData => {\n      let newItems = [...items];\n      newItems =  resData.tasks.map(t => t);\n      setItems(newItems);\n    })\n  }\n\n  const inputChangeHandler = (e) => {\n    setVal(e.target.value);\n  }\n\n  const createTask = (e) => {\n    e.preventDefault();\n    if(val !== \"\"){\n      if(editMode == false){\n        fetch('/tasks/add' ,  {method : 'POST' ,headers : {\n          'Content-Type': 'application/json'\n        }, body : JSON.stringify({\n          text : val\n        })}).then(res => {\n          return res.json();\n        }).then(resData => {\n            const newItem ={\n              taskText : resData.task.taskText,\n              key : resData.task._id\n            }\n            let updatedItems = [...items];\n            updatedItems.push(newItem);\n            setItems(updatedItems);\n            setVal(\"\");\n        }).catch(err=>{\n          console.log(err)\n        })\n      }\n      \n    }\n  }\n\n  const deleteItem = (taskindex) =>{\n    let taskId = items[taskindex]._id;\n    fetch(\"/tasks/delete/\" + taskId ,\n      {\n        method : 'DELETE' \n      }).then(res => {\n\n        return res.json()\n      }).then(result => {\n        const index = items.findIndex(task => task._id === taskId);\n        const newItems = [...items];\n        const updatedItems = newItems.filter(item => item._id !== taskId);\n        setItems(updatedItems);\n      })\n  }\n\n  const editItem = (taskindex) => {\n    setEditMode(true);\n    let taskId = items[taskindex]._id ;\n    setEditId(taskId);\n    let taskText = items[taskindex].taskText;\n    setVal(taskText);\n  }\n\n  const sendEditTask = () =>{\n    fetch(\"/tasks/edit/\" + editTaskId, \n      {\n        method : 'PUT',\n        body : JSON.stringify({text : val}),\n        headers : {'Content-Type': 'application/json'}\n      }\n    ).then(res => {\n      return res.json()\n    }).then(resData => {\n      setEditMode(false);\n      setVal(\"\")\n    }).catch(err=>{\n      console.log(err);\n    })\n  }\n\n\n  return (\n    <Fragment>   \n      <nav>\n        <div className=\"logo\">\n          <h2 className=\"so\">TodoList </h2>\n        </div>\n      </nav>\n      <div className=\"bf\">\n        <Grid textAlign=\"center\" >\n          <Grid.Column className=\"grid-width\" >\n            <Form onSubmit={createTask} className=\"form\"  size=\"large\">\n              <Form.Input name=\"task\" value={val}  placeholder=\"Add Task\" onChange={(e)=>inputChangeHandler(e)} required/>\n              <Button color=\"green\" inverted onClick={createTask}>\n                <Icon name=\"checkmark\"/>Add Task\n              </Button>\n                {\n                  editMode ? \n                    <Button color=\"blue\" inverted onClick={sendEditTask}>\n                      <Icon name=\"checkmark\"/>Edit Task   \n                    </Button> : null }\n            </Form>\n          </Grid.Column>\n        </Grid>\n        <TodoItems entries={items} delete={deleteItem} edit={editItem}/>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}